/*****************************************************************************/
/* Fish Feeder - Project by Carlos Filipe ZeeTeck                            */
/* Version: 1.5                                                              */
/* Last Update: 09/05/2025                                                   */
/* Hardware: Arduino Uno R3                                                  */
/*****************************************************************************/

// üìö Libraries
#include <Wire.h>             // Library for I2C communication (used by RTC and Display)
#include <U8g2lib.h>          // Library to control the OLED display (U8G2 library)
#include "Ds1302.h"           // Library to manage the DS1302 Real Time Clock (RTC) module

// üîß Pin Configuration (define all connections between Arduino and components)
const uint8_t DAT_PIN     = 3;     // RTC - Data pin
const uint8_t CLK_PIN     = 4;     // RTC - Clock pin
const uint8_t RST_PIN     = 5;     // RTC - Reset pin

const uint8_t MOTOR_ON    = 11;     // Motor Relay control pin (also used to light a yellow LED)

const uint8_t LED_RED     = 6;     // Red LED to indicate system error
const uint8_t LED_GREEN   = 7;     // Green LED to indicate system OK

const uint8_t BTN_ENTER   = 8;     // Button to confirm actions (ENTER)
const uint8_t BTN_PLUS    = 9;     // Button to increase values or navigate (PLUS)
const uint8_t BTN_MINUS   = 10;    // Button to decrease values or navigate (MINUS)

const uint8_t HALL_PIN    = 2;    // Hall effect sensor input pin (counts motor rotations)
const uint8_t BTN_BACK    = 12;    // Button to go back or cancel actions (BACK)

// üéØ Screen Identifiers (used to control which screen to display on the OLED)
const uint8_t SCREEN_LOGO    = 1;  // Startup Logo screen
const uint8_t SCREEN_HOUR    = 2;  // Clock screen showing current time
const uint8_t SCREEN_ERROR   = 3;  // Error screen showing system faults
const uint8_t SCREEN_MANUAL  = 4;  // Manual feeding mode screen
const uint8_t SCREEN_FEEDING = 5;  // Automatic feeding in progress screen

// ‚ö†Ô∏è Error Identifiers (used to define and track system errors)
const uint8_t NO_ERROR    = 0;     // No error detected
const uint8_t RTC_ERROR   = 1;     // Real Time Clock communication error
const uint8_t MOTOR_ERROR = 2;     // Motor or sensor malfunction error

// üì¶ Objects (create instances to control hardware modules)
Ds1302 rtc(RST_PIN, CLK_PIN, DAT_PIN);                            // Instance to manage RTC functions
U8G2_SH1106_128X64_NONAME_F_HW_I2C display(U8G2_R0, U8X8_PIN_NONE); // Instance to manage OLED display functions

// üïí RTC Current Date and Time Storage
Ds1302::DateTime now;                     // Variable to store the current date and time read from RTC

// üñ•Ô∏è Screen Management Variables
uint8_t screenNumber = SCREEN_LOGO;       // Tracks which screen should be displayed (starts with the logo)
unsigned long lastScreenChange = 0;       // Tracks the last time the screen changed (for screensaver timing)
bool showLogo = false;                    // Flag to alternate between logo and clock screens (screensaver logic)

// ‚öôÔ∏è Motor and Pulse Counting Control
const unsigned int PULSES_PER_TURN = 4051; // Number of pulses needed for a full rotation (calibrated value)

unsigned int pulseTarget = 0;             // Target number of pulses needed (calculated based on doses)
volatile unsigned int pulseCount = 0;     // Counter to track pulses from the Hall sensor (updated via interrupt)

bool motorActive = false;                 // Flag indicating whether the motor is currently running
bool manualActive = false;                // Flag indicating whether manual feeding is active
unsigned long manualStartTime = 0;        // Timestamp when manual feeding started
unsigned long manualPressTime = 0;        // Timestamp when manual button press started
bool manualRequest = false;               // Flag indicating a manual feeding request is pending

// ‚ö†Ô∏è Error Handling Variables
unsigned int lastPulseSnapshot = 0;       // Snapshot of the pulse count used to detect motor stall
uint8_t errorType = NO_ERROR;             // Stores the current error type (no error by default)

// üêü Feeding Schedule Definition
// Each row defines: [hour, minute, doses, active (1/0), alreadyFed (1/0)]
uint8_t setPoint[3][5] = {
  {06, 32, 1, 1, 0},                      // Feed at 06:32, 1 dose, active, not yet fed today
  {06, 35, 2, 1, 0},                      // Feed at 06:35, 2 dose, active, not yet fed today
  {06, 38, 1, 0, 0}                       // Feed at 06:38, 1 dose, inactive, not yet fed today
};


// üñºÔ∏è Display Bitmaps (Images displayed on the OLED screen)

// This bitmap represents the startup logo or brand image.
// The array contains pixel data in monochrome format (1-bit per pixel).
// Use a bitmap converter like "image2cpp" to generate this kind of array.
const unsigned char myLogoBitmap[] PROGMEM = { 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x0f, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x7f, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x3f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x1f, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x0f, 0x00, 0x00, 0x07, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x07, 0x00, 0x80, 0x1f, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x07, 0x00, 0xc0, 0x3f, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x03, 0x00, 0xe0, 0x39, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x01, 0x80, 0xff, 0x78, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x01, 0xc0, 0xff, 0x78, 0xe0, 0x3f, 0xe0, 0xff, 0xff, 0x0f, 0xe0, 0xff, 0xff, 0xef, 0xff, 
  0xff, 0x00, 0xe0, 0xff, 0x39, 0xe0, 0x1f, 0xc0, 0xff, 0xff, 0x0f, 0xc0, 0xff, 0xff, 0xcf, 0xff, 
  0xff, 0x00, 0xf0, 0xc0, 0x3f, 0xc0, 0x1f, 0xc0, 0xff, 0xff, 0x0f, 0xc0, 0xff, 0xff, 0xcf, 0xff, 
  0xff, 0x00, 0x78, 0x80, 0x1f, 0xc0, 0xff, 0xc1, 0xff, 0xff, 0x7f, 0xf8, 0xff, 0xff, 0xcf, 0xff, 
  0xff, 0xff, 0x3f, 0x00, 0x0f, 0xc0, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xcf, 0xff, 
  0xff, 0xff, 0x1f, 0x00, 0x00, 0xc0, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xcf, 0xff, 
  0xff, 0xff, 0x07, 0x00, 0x00, 0x80, 0xff, 0xf1, 0x81, 0x0f, 0xfc, 0xf8, 0xe0, 0x07, 0xcf, 0xe3, 
  0xff, 0x00, 0x00, 0x1e, 0x00, 0x80, 0xff, 0xf1, 0x00, 0x07, 0xf8, 0x78, 0xc0, 0x03, 0xce, 0xf1, 
  0x7f, 0x00, 0x00, 0x3f, 0x00, 0x80, 0xff, 0xf0, 0x18, 0x87, 0xf8, 0x38, 0x84, 0x21, 0x8c, 0xf8, 
  0x7f, 0x00, 0x80, 0x7f, 0x00, 0x80, 0xff, 0x78, 0x3c, 0xe2, 0xf1, 0x3c, 0x8e, 0x71, 0x00, 0xf8, 
  0xff, 0xff, 0xff, 0x73, 0x00, 0x80, 0x7f, 0x78, 0x3c, 0xe0, 0xf1, 0x3c, 0x8e, 0xf0, 0x06, 0xfc, 
  0xff, 0xff, 0xff, 0x73, 0x00, 0x80, 0x7f, 0x7c, 0x18, 0xc0, 0xf0, 0x3c, 0x84, 0xf8, 0x0f, 0xfe, 
  0xff, 0xff, 0xff, 0x77, 0x00, 0x80, 0x3f, 0x7e, 0x00, 0x00, 0xf0, 0x3c, 0x80, 0xf8, 0x0f, 0xfe, 
  0x7f, 0x00, 0x80, 0x3f, 0x00, 0xc0, 0x3f, 0x7e, 0x80, 0x03, 0xfc, 0x3c, 0xe0, 0xf9, 0x0f, 0xfc, 
  0x7f, 0x00, 0x00, 0x1f, 0x00, 0xc0, 0x1f, 0x7f, 0xfc, 0xe3, 0xff, 0x3c, 0xfe, 0xf1, 0x0f, 0xf8, 
  0xff, 0x00, 0x00, 0x0c, 0x00, 0xc0, 0x1f, 0x7f, 0xfc, 0xe3, 0xff, 0x3c, 0xfe, 0xf1, 0x87, 0xf8, 
  0xff, 0x01, 0x00, 0x00, 0x00, 0xc0, 0x0f, 0x7e, 0x18, 0xc7, 0xf9, 0x38, 0x8e, 0x71, 0xc4, 0xf1, 
  0xff, 0xff, 0x0f, 0x00, 0x00, 0xe0, 0x0f, 0xc0, 0x00, 0x07, 0xf8, 0x38, 0xc0, 0x01, 0xcc, 0xf1, 
  0xff, 0xff, 0x3f, 0x80, 0x07, 0xe0, 0x0f, 0xc0, 0x81, 0x0f, 0xfc, 0x7c, 0xc0, 0x03, 0xce, 0xe3, 
  0xff, 0x03, 0x78, 0xc0, 0x0f, 0xf0, 0xff, 0xff, 0xe7, 0x3f, 0xff, 0xff, 0xf1, 0x8f, 0xff, 0xff, 
  0xff, 0x03, 0xf0, 0xf1, 0x0f, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x07, 0xe0, 0xff, 0x1c, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x07, 0xc0, 0xff, 0x0e, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x0f, 0x00, 0xe0, 0x0f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x1f, 0x00, 0x80, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x3f, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x01, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x07, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x3f, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
const unsigned char manualBitmap[] PROGMEM = { 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0xfc, 0xff, 0xff, 0xff, 0x3f, 0x80, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0x0f, 0x00, 0xfe, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x07, 0x0e, 0xfc, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x7f, 0xf8, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x07, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xf0, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xf1, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xe3, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x7f, 0xfc, 0xff, 0xe7, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xfc, 0xff, 0xc7, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xfe, 0xff, 0xc7, 0xff, 0xff, 
  0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xfe, 0xff, 0xcf, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xfe, 0xff, 0xcf, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xfe, 0xff, 0xc7, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xfe, 0xff, 0xc7, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xfc, 0xff, 0xc7, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xfc, 0xff, 0xe3, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xf8, 0xbf, 0xe3, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xf8, 0x3f, 0xf1, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xf1, 0x1f, 0xf0, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xc3, 0x1f, 0xf8, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0x87, 0x1f, 0xfc, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0x8f, 0x0f, 0xf8, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0x0f, 0xf8, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
const unsigned char FeedingBitmap [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0x3f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xfc, 0x01, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0xff, 0xff, 0x00, 0xfc, 0xe7, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x7c, 0x3e, 0x00, 0xf0, 0xe3, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0x3f, 0x3f, 0x00, 0xf8, 0x1f, 0x00, 0xe0, 0xf1, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0x7f, 0x1e, 0x00, 0xf0, 0x9f, 0x01, 0xc0, 0xf0, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x0c, 0x00, 0xe3, 0x8f, 0x01, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xe3, 0x07, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xe0, 0x03, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0xe0, 0x03, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0x7f, 0x1c, 0x00, 0xf0, 0x07, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0x3f, 0x1e, 0x00, 0xf8, 0x0f, 0x00, 0xc0, 0xf0, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0xfc, 0x1f, 0x00, 0xe0, 0xf0, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0xff, 0x3f, 0x00, 0xf0, 0xe1, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0x7f, 0x00, 0xfc, 0xe3, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0xfe, 0xc7, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xc7, 0x9f, 0x1f, 0x7f, 0xfe, 0xfc, 0xf1, 0xe3, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xb1, 0x27, 0x4e, 0x1c, 0x3d, 0x71, 0xe4, 0x89, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0x3c, 0xf8, 0xe0, 0xc1, 0x83, 0x07, 0x0f, 0x3c, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0x7e, 0xfc, 0xf1, 0xe3, 0xc7, 0x8f, 0x3f, 0x7e, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff
};

// üì¢ Function Declarations (List of all function headers used in the program)
// These declarations make the functions recognizable before they are defined below.
void updateScreen();                           // Handles screen content based on the current state
void showScreenHour();                         // Displays the current time on the screen
void showErrorScreen();                        // Displays error messages based on system state
void checkRTC();                               // Reads and validates the RTC module data
void showImageBitmap(const uint8_t *bitmap);   // Displays a bitmap image on the screen
void screenSaver();                            // Manages screen saver transitions (logo/hour display)
void checkFeedingTime();                       // Verifies if it's time for an automatic feeding
void resetFeedingFlags();                      // Resets daily feeding status at midnight
void checkManualMode();                        // Detects manual feeding button combination
void countPulse();                             // Interrupt service routine to count pulses from the Hall sensor
void checkMotorError();                        // Verifies if the motor is running correctly
void CheckTurn();


// üõ† Setup Function (Runs once when the Arduino starts)
void setup() {
  rtc.init();                                    // Initialize the RTC module (Real-Time Clock)
  display.begin();                               // Initialize the OLED display

  // Configure output pins for LEDs and motor control
  pinMode(LED_GREEN, OUTPUT);                    // Set Green LED pin as OUTPUT (indicates system OK)
  pinMode(LED_RED, OUTPUT);                      // Set Red LED pin as OUTPUT (indicates error)
  pinMode(MOTOR_ON, OUTPUT);                     // Set Motor control pin (relay + yellow LED) as OUTPUT

  // Ensure all outputs start OFF
  digitalWrite(LED_GREEN, HIGH);                  // Turn On Green LED
  digitalWrite(LED_RED, LOW);                    // Turn off Red LED
  digitalWrite(MOTOR_ON, LOW);                   // Turn off Motor (relay and yellow LED)

  // Configure input pins for user buttons with internal pull-up resistors
  pinMode(BTN_ENTER, INPUT_PULLUP);              // Enter button (user menu interaction)
  pinMode(BTN_PLUS, INPUT_PULLUP);               // Plus button (navigation or dosing)
  pinMode(BTN_MINUS, INPUT_PULLUP);              // Minus button (navigation or dosing)
  pinMode(BTN_BACK, INPUT_PULLUP);               // Back button (return to previous screen)

  // Configure Hall effect sensor input (no pull-up as it's external hardware controlled)
  pinMode(HALL_PIN, INPUT_PULLUP);                      // Hall sensor for detecting rotations (motor feedback)

  // Attach an interrupt to the Hall sensor
  // Every time the sensor detects a rising edge (LOW to HIGH transition), 
  // it calls the countPulse() function to increment the pulse counter.
  attachInterrupt(digitalPinToInterrupt(HALL_PIN), countPulse, RISING);

  // Short delay to allow components to stabilize on power-up
  delay(100);                                   // Wait 100ms after initialization
}


// üîÅ Main Loop
// This is the main execution cycle that runs continuously while the Arduino is powered on.
// It manages system health checks, feeding schedules, user interactions, and display updates.
//
// ‚úÖ Logical Flow:
// 1. Always check RTC health (to detect communication loss or freezing).
// 2. Allow manual feeding even if RTC fails, but block if motor error is detected.
// 3. Only proceed with automated feeding and screen management if no screen-level error is active.
// 4. Continuously update the display to reflect the system state.

void loop() {
  checkRTC();  // üß† Always check RTC to ensure the system clock is updating.

  if (errorType != MOTOR_ERROR) {            // üöß Allow manual feeding even if RTC fails, but block if motor is faulty.
    checkManualMode();                       // ‚úã Check for manual feeding request.
  }

  if (screenNumber != SCREEN_ERROR) {        // ‚úÖ Only continue system logic if no critical error screen is shown.
    screenSaver();                           // üñ•Ô∏è Manage screensaver transitions between logo and clock.
    checkFeedingTime();                      // üçΩÔ∏è Check if scheduled feeding should start.
    resetFeedingFlags();                     // ‚ôªÔ∏è Reset daily flags when a new day begins.

    if (motorActive) {                       // üõ†Ô∏è If motor is running, ensure the pulses are being counted.
      checkMotorError();                     // ‚ö†Ô∏è Detect motor stalls or sensor failures.
      CheckTurn();
    }
  }

  updateScreen();                            // üì∫ Always update the display based on the current state.
}



// üì∫ Update Screen
// This function updates the OLED display based on the current screen state.
// It is called continuously to ensure the user always sees the latest system status.
void updateScreen() {
  switch (screenNumber) {

    case SCREEN_LOGO:
      showImageBitmap(myLogoBitmap);         // Show the logo image (used during idle/screen saver mode).
      break;

    case SCREEN_HOUR:
      showScreenHour();                      // Display the current hour and minute in large format.
      break;

    case SCREEN_ERROR:
      showErrorScreen(errorType);            // Display an error message (RTC or motor failure).
      break;

    case SCREEN_MANUAL:
      showImageBitmap(manualBitmap);         // Display an image indicating that manual feeding is active.
      break;

    case SCREEN_FEEDING:
      showImageBitmap(FeedingBitmap);        // Display an image showing that automatic feeding is in progress.
      break;

    default:
      showImageBitmap(myLogoBitmap);         // Fallback to the logo if the screen number is unknown.
      break;
  }
}

// ‚åö Display Current Time Screen
// This function draws the current hour and minute on the OLED display in a large, centered font.
// It runs continuously when the system is in CLOCK SCREEN mode.
void showScreenHour() {
  
  char timeStr[6];  // Prepare a 6-character array to hold the formatted time string in "HH:MM" format.
                    // Example: "07:02" requires 5 characters + 1 null terminator '\0'.

  sprintf(timeStr, "%02d:%02d", now.hour, now.minute);  // Format hours and minutes as two digits each, separated by ":".

  display.clearBuffer();  // Clear the display's internal memory to prepare for new content.

  display.setFont(u8g2_font_fub30_tr);  // Set a large and readable font for the time display.
                                       // Font details can be found in the U8g2 library documentation.

  uint8_t strWidth = display.getStrWidth(timeStr);  // Calculate the width of the formatted string in pixels.
  uint8_t x = (128 - strWidth) / 2;                 // Center the string horizontally on a 128-pixel-wide screen.

  display.drawStr(x, 46, timeStr);  // Draw the formatted time at the calculated horizontal position (x) and vertical position (y = 46).

  display.sendBuffer();  // Send all drawing commands to the display hardware to update the screen.
}


// ‚ùå Display Error Screen
// This function shows an error message on the OLED display based on the received error code.
// It helps the user quickly identify system problems like RTC failure or motor malfunction.
void showErrorScreen(uint8_t errorNumber) {

  switch (errorNumber) {

    case RTC_ERROR:
      display.clearBuffer();                                // Clear the display's internal memory.
      display.setFont(u8g2_font_ncenB14_tr);                 // Set a smaller font suitable for error messages.
      display.drawStr(15, 28, "ERROR 01");                   // Display error code "ERROR 01" at position (15, 28).
      display.drawStr(17, 48, "RTC NOK");                    // Display "RTC NOK" indicating RTC (clock) failure.
      display.sendBuffer();                                 // Update the display with the error message.
      break;

    case MOTOR_ERROR:
      display.clearBuffer();                                // Clear the display's internal memory.
      display.setFont(u8g2_font_ncenB14_tr);                 // Set the font for the error message.
      display.drawStr(15, 28, "ERROR 02");                   // Display error code "ERROR 02" at position (15, 28).
      display.drawStr(17, 48, "Motor NOK");                  // Display "Motor NOK" indicating motor or sensor failure.
      display.sendBuffer();                                 // Update the display with the error message.
      break;

    case NO_ERROR:
      display.clearBuffer();                                // Clear the display's internal memory.
      display.setFont(u8g2_font_ncenB14_tr);                 // Set the font for the system status message.
      display.drawStr(15, 28, "System");                     // Display "System" indicating system status.
      display.drawStr(17, 48, "OK");                         // Display "OK" indicating normal operation.
      display.sendBuffer();                                 // Update the display with the status message.
      break;

    default:                                                // For any unknown error code, treat as NO_ERROR.
      display.clearBuffer();                                
      display.setFont(u8g2_font_ncenB14_tr);                
      display.drawStr(15, 28, "System");                     
      display.drawStr(25, 48, "OK");                         
      display.sendBuffer();                                 
      break;
  }
}


// üß† Check RTC Health
// This function verifies if the RTC (Real-Time Clock) is updating correctly.
// It checks every second if the 'seconds' value has changed.
// If the RTC stops updating, it signals an error by changing LEDs and the screen.
void checkRTC() {
  static unsigned long lastCheck = 0;   // Stores the timestamp of the last check.
  static uint8_t lastSecond = 255;      // Initialize with an impossible second value (255) to force the first update.

  if (millis() - lastCheck >= 1000) {   // Check every 1000 ms (1 second).
    lastCheck = millis();               // Update the timestamp.
    rtc.getDateTime(&now);              // Read the current date and time from the RTC module.

    if (now.second != lastSecond) {     // If seconds have changed since the last check, RTC is updating correctly.
      lastSecond = now.second;          // Update the last known second.
      if (errorType == MOTOR_ERROR){
        errorType = MOTOR_ERROR;
      }else{
        errorType = NO_ERROR;
      }
      if (screenNumber == SCREEN_ERROR && errorType == NO_ERROR){
        screenNumber = SCREEN_LOGO;
        digitalWrite(LED_GREEN, HIGH);    // Turn ON the Green LED to indicate normal operation.
        digitalWrite(LED_RED, LOW);       // Turn OFF the Red LED (no error).
      }                                   // Only return to logo if currently showing error.
    } else {                            // If seconds have not changed, RTC might be frozen.
      digitalWrite(LED_GREEN, LOW);     // Turn OFF the Green LED (system not OK).
      digitalWrite(LED_RED, HIGH);      // Turn ON the Red LED to signal an error.
      screenNumber = SCREEN_ERROR;      // Switch to the Error screen.
      errorType = RTC_ERROR;            // Set error type to RTC Error.
    }
  }
}



// üñºÔ∏è Display Bitmap on Screen
// This function receives a bitmap and renders it on the OLED screen.
void showImageBitmap(const uint8_t *bitmap) {
  display.clearBuffer();                            // Clear the display's internal buffer.
  display.drawXBMP(0, 0, 128, 64, bitmap);          // Draw the bitmap at position (0,0) on a 128x64 display.
  display.sendBuffer();                            // Push the image to the OLED display.
}


// üîÅ Screensaver Manager
// Toggles between the Logo and Hour display every 10 seconds.
// Active only when the current screen is either the Logo or the Hour.
void screenSaver() {
  if (screenNumber == SCREEN_LOGO || screenNumber == SCREEN_HOUR) {  // Only toggle if in Logo or Hour mode.
    if (millis() - lastScreenChange >= 10000) {                      // If 10 seconds have passed since the last change.
      showLogo = !showLogo;                                          // Toggle the flag (switch between Logo and Hour).
      lastScreenChange = millis();                                   // Update the last change timestamp.
    }

    // Update screen based on the toggled flag, only if the screen is not already showing the desired content.
    if (showLogo && screenNumber != SCREEN_LOGO) {
      screenNumber = SCREEN_LOGO;
    } else if (!showLogo && screenNumber != SCREEN_HOUR) {
      screenNumber = SCREEN_HOUR;
    }
  }
}

// üçΩÔ∏è Scheduled Feeding Handler
// This function checks if it is time to feed the fish based on predefined set points.
// If the time matches and feeding hasn't been done yet, the motor is activated.
void checkFeedingTime() {
  if (motorActive) return;  // If the motor is already running, exit this function to avoid interference.

  for (uint8_t i = 0; i < 3; i++) {  // Loop through the three defined feeding schedules (set points).
    // Check if the current hour and minute match a set point,
    // the set point is active, and the feeding has not been done today.
    if (now.hour == setPoint[i][0] && 
        now.minute == setPoint[i][1] &&
        setPoint[i][3] == 1 && 
        setPoint[i][4] == 0) {

      pulseTarget = setPoint[i][2] * PULSES_PER_TURN;  // Calculate the total number of pulses based on the desired dose.
      pulseCount = 0;                                 // Reset the pulse counter.
      motorActive = true;                             // Mark the motor as active.
      digitalWrite(MOTOR_ON, HIGH);                   // Turn ON the motor (activates relay and yellow LED).
      screenNumber = SCREEN_FEEDING;                  // Change screen to show feeding status.
      setPoint[i][4] = 1;                             // Mark this feeding as done for today to avoid repetition.
      break;                                         // Exit the loop after finding a valid feeding schedule.
    }
  }
}


// ‚ôªÔ∏è Daily Feeding Reset
// This function resets the 'already fed' flags every new day.
// Ensures the system can feed again on the next day.
void resetFeedingFlags() {
  static uint8_t lastDay = 0;  // Keeps track of the last processed day.

  if (now.day != lastDay) {    // If the day has changed since the last check...
    for (uint8_t i = 0; i < 3; i++) {  // Loop through all set points.
      setPoint[i][4] = 0;              // Reset the 'already fed' flag for each set point.
    }
    lastDay = now.day;  // Update the last processed day.
  }
}


// ‚úã Manual Feeding Handler
// This function allows the user to trigger a manual feeding cycle by pressing both buttons (+ and -) simultaneously 
// and holding them for 3 seconds. This is designed to avoid accidental activation.
//
// ‚úÖ Conditions to trigger manual feeding:
// - Motor must NOT be already running.
// - Both buttons (+ and -) must be pressed at the same time for 3 seconds.
// - User must release both buttons after confirmation to start the motor.
//
// üõ°Ô∏è Safety Features:
// - Debouncing and timing to avoid accidental activation.
// - Resets request if buttons are released too early.
// - Only starts the motor when safe conditions are met.
void checkManualMode() {
  if (digitalRead(MOTOR_ON) == HIGH) return;  // üõë Exit if motor is already active.

  // üïí Detect simultaneous press of PLUS and MINUS buttons to start manual request timer
  if (digitalRead(BTN_PLUS) == HIGH && digitalRead(BTN_MINUS) == HIGH && !manualRequest) {
    if (manualPressTime == 0)
      manualPressTime = millis();  // Start timing when buttons are first detected as pressed.

    // ‚úÖ Confirm manual request if held for 3 seconds
    if (!manualActive && (millis() - manualPressTime >= 3000)) {
      manualRequest = true;  // Mark that user has requested manual feeding.
    }
  } else {
    manualPressTime = 0;  // üîÑ Reset timer if buttons are released too early.
  }

  // üöÄ Start feeding when user releases both buttons after confirmation
  if (digitalRead(BTN_PLUS) == LOW && digitalRead(BTN_MINUS) == LOW && manualRequest && digitalRead(MOTOR_ON) == LOW) {
    manualActive = true;                     // Flag manual mode as active.
    pulseCount = 0;                          // Reset pulse counter.
    motorActive = true;                      // Flag motor as active.
    screenNumber = SCREEN_MANUAL;            // Switch to manual feeding display.
    pulseTarget = PULSES_PER_TURN;           // Set target pulses for one full rotation.
    digitalWrite(MOTOR_ON, HIGH);            // Start motor and yellow LED.
  }
}


// üìà Pulse Counting Handler
// This function counts pulses from the Hall sensor during motor operation.
void countPulse() {
  pulseCount++;
}

void CheckTurn(){
  if (pulseCount >= pulseTarget) {  // Stop when target pulses are reached.
    digitalWrite(MOTOR_ON, LOW);    // Stop the motor (and yellow LED).
    manualActive = false;           // Reset manual active flag.
    motorActive = false;            // Reset motor active flag.
    manualRequest = false;          // Clear manual request state.
    pulseCount = 0;                 // Reset pulse counter.
    screenNumber = SCREEN_LOGO;     // Return to logo screen.
    manualPressTime = 0;            // Reset button press timer.
  }
}

// ‚ö†Ô∏è Motor Error Monitoring (Improved Version)
// This function checks if the motor is running but no new pulses are detected for over 1 second,
// indicating a possible jam or malfunction. The timer resets whenever new pulses are detected.
void checkMotorError() {
  static unsigned long motorErrorTimerStart = 0;

  if (digitalRead(MOTOR_ON) == HIGH) {
    if (motorErrorTimerStart == 0) {
      motorErrorTimerStart = millis();
      lastPulseSnapshot = pulseCount;
    }

    // üü¢ Reset timer if new pulses are detected (motor is rotating normally).
    if (pulseCount != lastPulseSnapshot) {
      motorErrorTimerStart = millis();
      lastPulseSnapshot = pulseCount;
    }

    // ‚ö†Ô∏è Trigger error if no pulses detected for over 3 seconds.
    if (millis() - motorErrorTimerStart > 2000) {
      errorType = MOTOR_ERROR;
      digitalWrite(MOTOR_ON, LOW);
      screenNumber = SCREEN_ERROR;
      digitalWrite(LED_GREEN, LOW);
      digitalWrite(LED_RED, HIGH);
      motorActive = false;
      manualRequest = false;
      manualActive = false;
    }

  } else if (digitalRead(MOTOR_ON) == LOW && errorType == NO_ERROR) {
    motorErrorTimerStart = 0;
    errorType = NO_ERROR;
    screenNumber = SCREEN_LOGO;
    digitalWrite(LED_GREEN, HIGH);
    digitalWrite(LED_RED, LOW);
  }
}




